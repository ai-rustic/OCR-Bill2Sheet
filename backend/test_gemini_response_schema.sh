#!/bin/bash

# Test Gemini API with response schema for Vietnamese bill OCR
# This demonstrates the new structured response format that matches our bills table schema

echo "üî• Testing Gemini API with Response Schema for Vietnamese Bills"
echo "================================================================"

# Check if GEMINI_API_KEY is set
if [ -z "$GEMINI_API_KEY" ]; then
    echo "‚ùå Error: GEMINI_API_KEY environment variable is not set"
    echo "   Please set it with: export GEMINI_API_KEY=your_api_key_here"
    exit 1
fi

# Create a test prompt for Vietnamese bill
TEST_PROMPT="Ph√¢n t√≠ch h√≥a ƒë∆°n Vi·ªát Nam trong h√¨nh ·∫£nh n√†y v√† tr√≠ch xu·∫•t th√¥ng tin theo ƒë·ªãnh d·∫°ng JSON v·ªõi c√°c tr∆∞·ªùng: form_no (m·∫´u s·ªë), serial_no (k√Ω hi·ªáu), invoice_no (s·ªë h√≥a ƒë∆°n), issued_date (ng√†y l·∫≠p), seller_name (t√™n ng∆∞·ªùi b√°n), seller_tax_code (m√£ s·ªë thu·∫ø), item_name (t√™n h√†ng h√≥a), unit (ƒë∆°n v·ªã), quantity (s·ªë l∆∞·ª£ng), unit_price (ƒë∆°n gi√°), total_amount (th√†nh ti·ªÅn), vat_rate (thu·∫ø su·∫•t VAT %), vat_amount (ti·ªÅn thu·∫ø VAT)."

# Create test base64 image (minimal 1x1 PNG for testing)
TEST_IMAGE_B64="iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg=="

echo "üì§ Sending request to Gemini API with response schema..."
echo ""

# Make the API call with response schema
curl -H 'Content-Type: application/json' \
     -H "x-goog-api-key: ${GEMINI_API_KEY}" \
     -d "{
  \"contents\": [
    {
      \"parts\": [
        { \"text\": \"$TEST_PROMPT\" },
        {
          \"inlineData\": {
            \"mimeType\": \"image/png\",
            \"data\": \"$TEST_IMAGE_B64\"
          }
        }
      ]
    }
  ],
  \"generationConfig\": {
    \"temperature\": 0.1,
    \"topK\": 1,
    \"topP\": 0.8,
    \"maxOutputTokens\": 2048,
    \"responseMimeType\": \"application/json\",
    \"responseSchema\": {
      \"type\": \"object\",
      \"properties\": {
        \"form_no\": {
          \"type\": \"string\",
          \"description\": \"M·∫´u s·ªë h√≥a ƒë∆°n (v√≠ d·ª•: 01-GTKT, 02-GTTT)\"
        },
        \"serial_no\": {
          \"type\": \"string\",
          \"description\": \"K√Ω hi·ªáu h√≥a ƒë∆°n (v√≠ d·ª•: AA/24E, BB/25F)\"
        },
        \"invoice_no\": {
          \"type\": \"string\",
          \"description\": \"S·ªë h√≥a ƒë∆°n\"
        },
        \"issued_date\": {
          \"type\": \"string\",
          \"format\": \"date\",
          \"description\": \"Ng√†y l·∫≠p h√≥a ƒë∆°n (YYYY-MM-DD)\"
        },
        \"seller_name\": {
          \"type\": \"string\",
          \"description\": \"T√™n ng∆∞·ªùi b√°n/c√¥ng ty\"
        },
        \"seller_tax_code\": {
          \"type\": \"string\",
          \"description\": \"M√£ s·ªë thu·∫ø c·ªßa ng∆∞·ªùi b√°n\"
        },
        \"item_name\": {
          \"type\": \"string\",
          \"description\": \"T√™n h√†ng h√≥a/d·ªãch v·ª•\"
        },
        \"unit\": {
          \"type\": \"string\",
          \"description\": \"ƒê∆°n v·ªã t√≠nh (v√≠ d·ª•: c√°i, kg, gi·ªù, m2)\"
        },
        \"quantity\": {
          \"type\": \"number\",
          \"description\": \"S·ªë l∆∞·ª£ng h√†ng h√≥a/d·ªãch v·ª•\"
        },
        \"unit_price\": {
          \"type\": \"number\",
          \"description\": \"ƒê∆°n gi√° (VND)\"
        },
        \"total_amount\": {
          \"type\": \"number\",
          \"description\": \"Th√†nh ti·ªÅn tr∆∞·ªõc thu·∫ø (VND)\"
        },
        \"vat_rate\": {
          \"type\": \"number\",
          \"description\": \"Thu·∫ø su·∫•t VAT (%) - v√≠ d·ª•: 0, 5, 8, 10\"
        },
        \"vat_amount\": {
          \"type\": \"number\",
          \"description\": \"Ti·ªÅn thu·∫ø VAT (VND)\"
        }
      },
      \"required\": []
    }
  },
  \"safetySettings\": [
    {
      \"category\": \"HARM_CATEGORY_HARASSMENT\",
      \"threshold\": \"BLOCK_MEDIUM_AND_ABOVE\"
    },
    {
      \"category\": \"HARM_CATEGORY_HATE_SPEECH\",
      \"threshold\": \"BLOCK_MEDIUM_AND_ABOVE\"
    },
    {
      \"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",
      \"threshold\": \"BLOCK_MEDIUM_AND_ABOVE\"
    },
    {
      \"category\": \"HARM_CATEGORY_DANGEROUS_CONTENT\",
      \"threshold\": \"BLOCK_MEDIUM_AND_ABOVE\"
    }
  ]
}" \
"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent" | jq .

echo ""
echo "‚úÖ Response Schema Benefits:"
echo "   - Gemini returns structured JSON matching bills table schema"
echo "   - All 13 fields defined with Vietnamese descriptions"
echo "   - Reduced parsing errors and improved data consistency"
echo "   - Better field mapping to database columns"
echo ""
echo "üìã Fields included in response schema:"
echo "   1. form_no (M·∫´u s·ªë h√≥a ƒë∆°n)"
echo "   2. serial_no (K√Ω hi·ªáu h√≥a ƒë∆°n)"
echo "   3. invoice_no (S·ªë h√≥a ƒë∆°n)"
echo "   4. issued_date (Ng√†y l·∫≠p)"
echo "   5. seller_name (T√™n ng∆∞·ªùi b√°n)"
echo "   6. seller_tax_code (M√£ s·ªë thu·∫ø)"
echo "   7. item_name (T√™n h√†ng h√≥a)"
echo "   8. unit (ƒê∆°n v·ªã t√≠nh)"
echo "   9. quantity (S·ªë l∆∞·ª£ng)"
echo "   10. unit_price (ƒê∆°n gi√°)"
echo "   11. total_amount (Th√†nh ti·ªÅn)"
echo "   12. vat_rate (Thu·∫ø su·∫•t VAT)"
echo "   13. vat_amount (Ti·ªÅn thu·∫ø VAT)"